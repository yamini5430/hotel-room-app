{"ast":null,"code":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, PropTypes } from 'react';\n\nvar Checkbox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Checkbox, _Component);\n\n  function Checkbox() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Checkbox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isChecked: _this.props.isChecked || false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleCheckboxChange\", function (e) {\n      var _this$props = _this.props,\n          checkChangeHandler = _this$props.checkChangeHandler,\n          type = _this$props.type;\n\n      _this.setState(function (_ref) {\n        var isChecked = _ref.isChecked;\n        return {\n          isChecked: !isChecked\n        };\n      });\n\n      checkChangeHandler(type, e);\n    });\n\n    return _this;\n  }\n\n  _createClass(Checkbox, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.isChecked != this.state.isChecked) {\n        this.setState({\n          isChecked: nextProps.isChecked\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var label = this.props.label;\n      var isChecked = this.state.isChecked;\n      return React.createElement(\"div\", {\n        className: \"checkbox\"\n      }, React.createElement(\"label\", null, React.createElement(\"input\", {\n        type: \"checkbox\",\n        value: label,\n        checked: isChecked,\n        onChange: this.toggleCheckboxChange\n      }), label));\n    }\n  }]);\n\n  return Checkbox;\n}(Component); // Checkbox.propTypes = {\n//   label: PropTypes.string.isRequired,\n//   handleCheckboxChange: PropTypes.func.isRequired,\n// };\n\n\nexport default Checkbox;","map":{"version":3,"sources":["/Users/yaminisukhija/roomjs-app/components/UI/CheckBox/CheckBox.js"],"names":["React","Component","PropTypes","Checkbox","isChecked","props","e","checkChangeHandler","type","setState","nextProps","state","label","toggleCheckboxChange"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;;IAEMC,Q;;;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,SAAS,EAAE,MAAKC,KAAL,CAAWD,SAAX,IAAwB;AAD7B,K;;2EAYe,UAACE,CAAD,EAAO;AAAA,wBACS,MAAKD,KADd;AAAA,UACpBE,kBADoB,eACpBA,kBADoB;AAAA,UACAC,IADA,eACAA,IADA;;AAG5B,YAAKC,QAAL,CAAc;AAAA,YAAGL,SAAH,QAAGA,SAAH;AAAA,eACZ;AACEA,UAAAA,SAAS,EAAE,CAACA;AADd,SADY;AAAA,OAAd;;AAMAG,MAAAA,kBAAkB,CAACC,IAAD,EAAMF,CAAN,CAAlB;AACD,K;;;;;;;8CAlByBI,S,EAAU;AAChC,UAAGA,SAAS,CAACN,SAAV,IAAuB,KAAKO,KAAL,CAAWP,SAArC,EAA+C;AAC3C,aAAKK,QAAL,CAAc;AACZL,UAAAA,SAAS,EAAIM,SAAS,CAACN;AADX,SAAd;AAGH;AACJ;;;6BAcQ;AAAA,UACCQ,KADD,GACW,KAAKP,KADhB,CACCO,KADD;AAAA,UAECR,SAFD,GAEe,KAAKO,KAFpB,CAECP,SAFD;AAIP,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,mCACE;AACkB,QAAA,IAAI,EAAC,UADvB;AAEkB,QAAA,KAAK,EAAEQ,KAFzB;AAGkB,QAAA,OAAO,EAAER,SAH3B;AAIkB,QAAA,QAAQ,EAAE,KAAKS;AAJjC,QADF,EAQGD,KARH,CADF,CADF;AAcD;;;;EA3CoBX,S,GA8CvB;AACA;AACA;AACA;;;AAEA,eAAeE,QAAf","sourcesContent":["import React, { Component, PropTypes } from 'react';\n\nclass Checkbox extends Component {\n  state = {\n    isChecked: this.props.isChecked || false,\n  }\n\n  componentWillReceiveProps(nextProps){\n      if(nextProps.isChecked != this.state.isChecked){\n          this.setState({\n            isChecked :  nextProps.isChecked\n          });\n      }\n  }\n\n  toggleCheckboxChange = (e) => {\n    const { checkChangeHandler, type } = this.props;\n\n    this.setState(({ isChecked }) => (\n      {\n        isChecked: !isChecked,\n      }\n    ));\n\n    checkChangeHandler(type,e);\n  }\n\n  render() {\n    const { label } = this.props;\n    const { isChecked } = this.state;\n\n    return (\n      <div className=\"checkbox\">\n        <label>\n          <input\n                            type=\"checkbox\"\n                            value={label}\n                            checked={isChecked}\n                            onChange={this.toggleCheckboxChange}\n                        />\n\n          {label}\n        </label>\n      </div>\n    );\n  }\n}\n\n// Checkbox.propTypes = {\n//   label: PropTypes.string.isRequired,\n//   handleCheckboxChange: PropTypes.func.isRequired,\n// };\n\nexport default Checkbox;"]},"metadata":{},"sourceType":"module"}